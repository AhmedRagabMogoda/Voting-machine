
voting_machine.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bbc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00000bbc  00000c30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000c58  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c88  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000150  00000000  00000000  00000cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001eba  00000000  00000000  00000e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000095a  00000000  00000000  00002cce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ec1  00000000  00000000  00003628  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000250  00000000  00000000  000044ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005a9  00000000  00000000  0000473c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000013b6  00000000  00000000  00004ce5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000100  00000000  00000000  0000609b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 ba 00 	jmp	0x174	; 0x174 <__ctors_end>
   4:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
   8:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
   c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  10:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  14:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  18:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  1c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  20:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  24:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  28:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  2c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  30:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  34:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  38:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  3c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  40:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  44:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  48:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  4c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  50:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  54:	f3 00       	.word	0x00f3	; ????
  56:	0c 01       	movw	r0, r24
  58:	25 01       	movw	r4, r10
  5a:	3e 01       	movw	r6, r28
  5c:	56 01       	movw	r10, r12
  5e:	56 01       	movw	r10, r12
  60:	56 01       	movw	r10, r12
  62:	56 01       	movw	r10, r12
  64:	56 01       	movw	r10, r12
  66:	56 01       	movw	r10, r12
  68:	56 01       	movw	r10, r12
  6a:	56 01       	movw	r10, r12
  6c:	56 01       	movw	r10, r12
  6e:	56 01       	movw	r10, r12
  70:	56 01       	movw	r10, r12
  72:	56 01       	movw	r10, r12
  74:	56 01       	movw	r10, r12
  76:	56 01       	movw	r10, r12
  78:	56 01       	movw	r10, r12
  7a:	56 01       	movw	r10, r12
  7c:	56 01       	movw	r10, r12
  7e:	56 01       	movw	r10, r12
  80:	56 01       	movw	r10, r12
  82:	56 01       	movw	r10, r12
  84:	56 01       	movw	r10, r12
  86:	56 01       	movw	r10, r12
  88:	56 01       	movw	r10, r12
  8a:	56 01       	movw	r10, r12
  8c:	56 01       	movw	r10, r12
  8e:	56 01       	movw	r10, r12
  90:	56 01       	movw	r10, r12
  92:	56 01       	movw	r10, r12
  94:	f3 00       	.word	0x00f3	; ????
  96:	0c 01       	movw	r0, r24
  98:	25 01       	movw	r4, r10
  9a:	3e 01       	movw	r6, r28
  9c:	63 01       	movw	r12, r6
  9e:	7c 01       	movw	r14, r24
  a0:	95 01       	movw	r18, r10
  a2:	ae 01       	movw	r20, r28
  a4:	c6 01       	movw	r24, r12
  a6:	c6 01       	movw	r24, r12
  a8:	c6 01       	movw	r24, r12
  aa:	c6 01       	movw	r24, r12
  ac:	c6 01       	movw	r24, r12
  ae:	c6 01       	movw	r24, r12
  b0:	c6 01       	movw	r24, r12
  b2:	c6 01       	movw	r24, r12
  b4:	c6 01       	movw	r24, r12
  b6:	c6 01       	movw	r24, r12
  b8:	c6 01       	movw	r24, r12
  ba:	c6 01       	movw	r24, r12
  bc:	c6 01       	movw	r24, r12
  be:	c6 01       	movw	r24, r12
  c0:	c6 01       	movw	r24, r12
  c2:	c6 01       	movw	r24, r12
  c4:	c6 01       	movw	r24, r12
  c6:	c6 01       	movw	r24, r12
  c8:	c6 01       	movw	r24, r12
  ca:	c6 01       	movw	r24, r12
  cc:	c6 01       	movw	r24, r12
  ce:	c6 01       	movw	r24, r12
  d0:	c6 01       	movw	r24, r12
  d2:	c6 01       	movw	r24, r12
  d4:	c6 01       	movw	r24, r12
  d6:	c6 01       	movw	r24, r12
  d8:	c6 01       	movw	r24, r12
  da:	c6 01       	movw	r24, r12
  dc:	63 01       	movw	r12, r6
  de:	7c 01       	movw	r14, r24
  e0:	95 01       	movw	r18, r10
  e2:	ae 01       	movw	r20, r28
  e4:	d3 01       	movw	r26, r6
  e6:	e7 01       	movw	r28, r14
  e8:	fb 01       	movw	r30, r22
  ea:	0f 02       	muls	r16, r31
  ec:	23 02       	muls	r18, r19
  ee:	23 02       	muls	r18, r19
  f0:	23 02       	muls	r18, r19
  f2:	23 02       	muls	r18, r19
  f4:	23 02       	muls	r18, r19
  f6:	23 02       	muls	r18, r19
  f8:	23 02       	muls	r18, r19
  fa:	23 02       	muls	r18, r19
  fc:	23 02       	muls	r18, r19
  fe:	23 02       	muls	r18, r19
 100:	23 02       	muls	r18, r19
 102:	23 02       	muls	r18, r19
 104:	23 02       	muls	r18, r19
 106:	23 02       	muls	r18, r19
 108:	23 02       	muls	r18, r19
 10a:	23 02       	muls	r18, r19
 10c:	23 02       	muls	r18, r19
 10e:	23 02       	muls	r18, r19
 110:	23 02       	muls	r18, r19
 112:	23 02       	muls	r18, r19
 114:	23 02       	muls	r18, r19
 116:	23 02       	muls	r18, r19
 118:	23 02       	muls	r18, r19
 11a:	23 02       	muls	r18, r19
 11c:	23 02       	muls	r18, r19
 11e:	23 02       	muls	r18, r19
 120:	23 02       	muls	r18, r19
 122:	23 02       	muls	r18, r19
 124:	d3 01       	movw	r26, r6
 126:	e7 01       	movw	r28, r14
 128:	fb 01       	movw	r30, r22
 12a:	0f 02       	muls	r16, r31
 12c:	32 02       	muls	r19, r18
 12e:	39 02       	muls	r19, r25
 130:	40 02       	muls	r20, r16
 132:	47 02       	muls	r20, r23
 134:	4d 02       	muls	r20, r29
 136:	4d 02       	muls	r20, r29
 138:	4d 02       	muls	r20, r29
 13a:	4d 02       	muls	r20, r29
 13c:	4d 02       	muls	r20, r29
 13e:	4d 02       	muls	r20, r29
 140:	4d 02       	muls	r20, r29
 142:	4d 02       	muls	r20, r29
 144:	4d 02       	muls	r20, r29
 146:	4d 02       	muls	r20, r29
 148:	4d 02       	muls	r20, r29
 14a:	4d 02       	muls	r20, r29
 14c:	4d 02       	muls	r20, r29
 14e:	4d 02       	muls	r20, r29
 150:	4d 02       	muls	r20, r29
 152:	4d 02       	muls	r20, r29
 154:	4d 02       	muls	r20, r29
 156:	4d 02       	muls	r20, r29
 158:	4d 02       	muls	r20, r29
 15a:	4d 02       	muls	r20, r29
 15c:	4d 02       	muls	r20, r29
 15e:	4d 02       	muls	r20, r29
 160:	4d 02       	muls	r20, r29
 162:	4d 02       	muls	r20, r29
 164:	4d 02       	muls	r20, r29
 166:	4d 02       	muls	r20, r29
 168:	4d 02       	muls	r20, r29
 16a:	4d 02       	muls	r20, r29
 16c:	32 02       	muls	r19, r18
 16e:	39 02       	muls	r19, r25
 170:	40 02       	muls	r20, r16
 172:	47 02       	muls	r20, r23

00000174 <__ctors_end>:
 174:	11 24       	eor	r1, r1
 176:	1f be       	out	0x3f, r1	; 63
 178:	cf e5       	ldi	r28, 0x5F	; 95
 17a:	d8 e0       	ldi	r29, 0x08	; 8
 17c:	de bf       	out	0x3e, r29	; 62
 17e:	cd bf       	out	0x3d, r28	; 61

00000180 <__do_copy_data>:
 180:	10 e0       	ldi	r17, 0x00	; 0
 182:	a0 e6       	ldi	r26, 0x60	; 96
 184:	b0 e0       	ldi	r27, 0x00	; 0
 186:	ec eb       	ldi	r30, 0xBC	; 188
 188:	fb e0       	ldi	r31, 0x0B	; 11
 18a:	02 c0       	rjmp	.+4      	; 0x190 <__do_copy_data+0x10>
 18c:	05 90       	lpm	r0, Z+
 18e:	0d 92       	st	X+, r0
 190:	a8 38       	cpi	r26, 0x88	; 136
 192:	b1 07       	cpc	r27, r17
 194:	d9 f7       	brne	.-10     	; 0x18c <__do_copy_data+0xc>
 196:	0e 94 3d 03 	call	0x67a	; 0x67a <main>
 19a:	0c 94 dc 05 	jmp	0xbb8	; 0xbb8 <_exit>

0000019e <__bad_interrupt>:
 19e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a2 <BUTTON_init>:
#include "BUTTON.h"
#include "DIO.h"

void BUTTON_init(unsigned char port,unsigned char pin_number)
{
	DIO_set_pin_dir(port,pin_number,0);
 1a2:	40 e0       	ldi	r20, 0x00	; 0
 1a4:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_set_pin_dir>
 1a8:	08 95       	ret

000001aa <BUTTON_init_with_pull_up>:
}

void BUTTON_init_with_pull_up(unsigned char port,unsigned char pin_number)
{
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	c8 2f       	mov	r28, r24
 1b0:	d6 2f       	mov	r29, r22
	DIO_set_pin_dir(port,pin_number,0); // input
 1b2:	40 e0       	ldi	r20, 0x00	; 0
 1b4:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_set_pin_dir>
	DIO_write_pin(port,pin_number,1); //pull up
 1b8:	41 e0       	ldi	r20, 0x01	; 1
 1ba:	6d 2f       	mov	r22, r29
 1bc:	8c 2f       	mov	r24, r28
 1be:	0e 94 57 01 	call	0x2ae	; 0x2ae <DIO_write_pin>
}
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	08 95       	ret

000001c8 <BUTTON_read>:

unsigned char BUTTON_read(unsigned char port,unsigned char pin_number)
{
	unsigned char ret_value;
	ret_value=DIO_read_pin(port,pin_number);
 1c8:	0e 94 c7 01 	call	0x38e	; 0x38e <DIO_read_pin>
	return ret_value;
}
 1cc:	08 95       	ret

000001ce <DIO_set_pin_dir>:
		PORTC|=value;
		break;
		case 'D':
		case 'd':
		PORTD&=0xf0;
		PORTD|=value;
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	fc 01       	movw	r30, r24
 1d2:	e1 54       	subi	r30, 0x41	; 65
 1d4:	f1 09       	sbc	r31, r1
 1d6:	e4 32       	cpi	r30, 0x24	; 36
 1d8:	f1 05       	cpc	r31, r1
 1da:	08 f0       	brcs	.+2      	; 0x1de <DIO_set_pin_dir+0x10>
 1dc:	67 c0       	rjmp	.+206    	; 0x2ac <DIO_set_pin_dir+0xde>
 1de:	e6 5d       	subi	r30, 0xD6	; 214
 1e0:	ff 4f       	sbci	r31, 0xFF	; 255
 1e2:	0c 94 d6 05 	jmp	0xbac	; 0xbac <__tablejump2__>
 1e6:	41 30       	cpi	r20, 0x01	; 1
 1e8:	59 f4       	brne	.+22     	; 0x200 <DIO_set_pin_dir+0x32>
 1ea:	2a b3       	in	r18, 0x1a	; 26
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <DIO_set_pin_dir+0x28>
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	6a 95       	dec	r22
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <DIO_set_pin_dir+0x24>
 1fa:	82 2b       	or	r24, r18
 1fc:	8a bb       	out	0x1a, r24	; 26
 1fe:	08 95       	ret
 200:	2a b3       	in	r18, 0x1a	; 26
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_set_pin_dir+0x3e>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	6a 95       	dec	r22
 20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_set_pin_dir+0x3a>
 210:	80 95       	com	r24
 212:	82 23       	and	r24, r18
 214:	8a bb       	out	0x1a, r24	; 26
 216:	08 95       	ret
 218:	41 30       	cpi	r20, 0x01	; 1
 21a:	59 f4       	brne	.+22     	; 0x232 <DIO_set_pin_dir+0x64>
 21c:	27 b3       	in	r18, 0x17	; 23
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	02 c0       	rjmp	.+4      	; 0x228 <DIO_set_pin_dir+0x5a>
 224:	88 0f       	add	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	6a 95       	dec	r22
 22a:	e2 f7       	brpl	.-8      	; 0x224 <DIO_set_pin_dir+0x56>
 22c:	82 2b       	or	r24, r18
 22e:	87 bb       	out	0x17, r24	; 23
 230:	08 95       	ret
 232:	27 b3       	in	r18, 0x17	; 23
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_set_pin_dir+0x70>
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	6a 95       	dec	r22
 240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_set_pin_dir+0x6c>
 242:	80 95       	com	r24
 244:	82 23       	and	r24, r18
 246:	87 bb       	out	0x17, r24	; 23
 248:	08 95       	ret
 24a:	41 30       	cpi	r20, 0x01	; 1
 24c:	59 f4       	brne	.+22     	; 0x264 <DIO_set_pin_dir+0x96>
 24e:	24 b3       	in	r18, 0x14	; 20
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	02 c0       	rjmp	.+4      	; 0x25a <DIO_set_pin_dir+0x8c>
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	6a 95       	dec	r22
 25c:	e2 f7       	brpl	.-8      	; 0x256 <DIO_set_pin_dir+0x88>
 25e:	82 2b       	or	r24, r18
 260:	84 bb       	out	0x14, r24	; 20
 262:	08 95       	ret
 264:	24 b3       	in	r18, 0x14	; 20
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	02 c0       	rjmp	.+4      	; 0x270 <DIO_set_pin_dir+0xa2>
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	6a 95       	dec	r22
 272:	e2 f7       	brpl	.-8      	; 0x26c <DIO_set_pin_dir+0x9e>
 274:	80 95       	com	r24
 276:	82 23       	and	r24, r18
 278:	84 bb       	out	0x14, r24	; 20
 27a:	08 95       	ret
 27c:	41 30       	cpi	r20, 0x01	; 1
 27e:	59 f4       	brne	.+22     	; 0x296 <DIO_set_pin_dir+0xc8>
 280:	21 b3       	in	r18, 0x11	; 17
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_set_pin_dir+0xbe>
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	6a 95       	dec	r22
 28e:	e2 f7       	brpl	.-8      	; 0x288 <DIO_set_pin_dir+0xba>
 290:	82 2b       	or	r24, r18
 292:	81 bb       	out	0x11, r24	; 17
 294:	08 95       	ret
 296:	21 b3       	in	r18, 0x11	; 17
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_set_pin_dir+0xd4>
 29e:	88 0f       	add	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	6a 95       	dec	r22
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <DIO_set_pin_dir+0xd0>
 2a6:	80 95       	com	r24
 2a8:	82 23       	and	r24, r18
 2aa:	81 bb       	out	0x11, r24	; 17
 2ac:	08 95       	ret

000002ae <DIO_write_pin>:
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	fc 01       	movw	r30, r24
 2b2:	e1 54       	subi	r30, 0x41	; 65
 2b4:	f1 09       	sbc	r31, r1
 2b6:	e4 32       	cpi	r30, 0x24	; 36
 2b8:	f1 05       	cpc	r31, r1
 2ba:	08 f0       	brcs	.+2      	; 0x2be <DIO_write_pin+0x10>
 2bc:	67 c0       	rjmp	.+206    	; 0x38c <DIO_write_pin+0xde>
 2be:	e2 5b       	subi	r30, 0xB2	; 178
 2c0:	ff 4f       	sbci	r31, 0xFF	; 255
 2c2:	0c 94 d6 05 	jmp	0xbac	; 0xbac <__tablejump2__>
 2c6:	41 30       	cpi	r20, 0x01	; 1
 2c8:	59 f4       	brne	.+22     	; 0x2e0 <DIO_write_pin+0x32>
 2ca:	2b b3       	in	r18, 0x1b	; 27
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <DIO_write_pin+0x28>
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	6a 95       	dec	r22
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <DIO_write_pin+0x24>
 2da:	82 2b       	or	r24, r18
 2dc:	8b bb       	out	0x1b, r24	; 27
 2de:	08 95       	ret
 2e0:	2b b3       	in	r18, 0x1b	; 27
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_write_pin+0x3e>
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	6a 95       	dec	r22
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_write_pin+0x3a>
 2f0:	80 95       	com	r24
 2f2:	82 23       	and	r24, r18
 2f4:	8b bb       	out	0x1b, r24	; 27
 2f6:	08 95       	ret
 2f8:	41 30       	cpi	r20, 0x01	; 1
 2fa:	59 f4       	brne	.+22     	; 0x312 <DIO_write_pin+0x64>
 2fc:	28 b3       	in	r18, 0x18	; 24
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	02 c0       	rjmp	.+4      	; 0x308 <DIO_write_pin+0x5a>
 304:	88 0f       	add	r24, r24
 306:	99 1f       	adc	r25, r25
 308:	6a 95       	dec	r22
 30a:	e2 f7       	brpl	.-8      	; 0x304 <DIO_write_pin+0x56>
 30c:	82 2b       	or	r24, r18
 30e:	88 bb       	out	0x18, r24	; 24
 310:	08 95       	ret
 312:	28 b3       	in	r18, 0x18	; 24
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	02 c0       	rjmp	.+4      	; 0x31e <DIO_write_pin+0x70>
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	6a 95       	dec	r22
 320:	e2 f7       	brpl	.-8      	; 0x31a <DIO_write_pin+0x6c>
 322:	80 95       	com	r24
 324:	82 23       	and	r24, r18
 326:	88 bb       	out	0x18, r24	; 24
 328:	08 95       	ret
 32a:	41 30       	cpi	r20, 0x01	; 1
 32c:	59 f4       	brne	.+22     	; 0x344 <DIO_write_pin+0x96>
 32e:	25 b3       	in	r18, 0x15	; 21
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	02 c0       	rjmp	.+4      	; 0x33a <DIO_write_pin+0x8c>
 336:	88 0f       	add	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	6a 95       	dec	r22
 33c:	e2 f7       	brpl	.-8      	; 0x336 <DIO_write_pin+0x88>
 33e:	82 2b       	or	r24, r18
 340:	85 bb       	out	0x15, r24	; 21
 342:	08 95       	ret
 344:	25 b3       	in	r18, 0x15	; 21
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	02 c0       	rjmp	.+4      	; 0x350 <DIO_write_pin+0xa2>
 34c:	88 0f       	add	r24, r24
 34e:	99 1f       	adc	r25, r25
 350:	6a 95       	dec	r22
 352:	e2 f7       	brpl	.-8      	; 0x34c <DIO_write_pin+0x9e>
 354:	80 95       	com	r24
 356:	82 23       	and	r24, r18
 358:	85 bb       	out	0x15, r24	; 21
 35a:	08 95       	ret
 35c:	41 30       	cpi	r20, 0x01	; 1
 35e:	59 f4       	brne	.+22     	; 0x376 <DIO_write_pin+0xc8>
 360:	22 b3       	in	r18, 0x12	; 18
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	02 c0       	rjmp	.+4      	; 0x36c <DIO_write_pin+0xbe>
 368:	88 0f       	add	r24, r24
 36a:	99 1f       	adc	r25, r25
 36c:	6a 95       	dec	r22
 36e:	e2 f7       	brpl	.-8      	; 0x368 <DIO_write_pin+0xba>
 370:	82 2b       	or	r24, r18
 372:	82 bb       	out	0x12, r24	; 18
 374:	08 95       	ret
 376:	22 b3       	in	r18, 0x12	; 18
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	02 c0       	rjmp	.+4      	; 0x382 <DIO_write_pin+0xd4>
 37e:	88 0f       	add	r24, r24
 380:	99 1f       	adc	r25, r25
 382:	6a 95       	dec	r22
 384:	e2 f7       	brpl	.-8      	; 0x37e <DIO_write_pin+0xd0>
 386:	80 95       	com	r24
 388:	82 23       	and	r24, r18
 38a:	82 bb       	out	0x12, r24	; 18
 38c:	08 95       	ret

0000038e <DIO_read_pin>:
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	fc 01       	movw	r30, r24
 392:	e1 54       	subi	r30, 0x41	; 65
 394:	f1 09       	sbc	r31, r1
 396:	e4 32       	cpi	r30, 0x24	; 36
 398:	f1 05       	cpc	r31, r1
 39a:	08 f0       	brcs	.+2      	; 0x39e <DIO_read_pin+0x10>
 39c:	54 c0       	rjmp	.+168    	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 39e:	ee 58       	subi	r30, 0x8E	; 142
 3a0:	ff 4f       	sbci	r31, 0xFF	; 255
 3a2:	0c 94 d6 05 	jmp	0xbac	; 0xbac <__tablejump2__>
 3a6:	49 b3       	in	r20, 0x19	; 25
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	9c 01       	movw	r18, r24
 3ae:	06 2e       	mov	r0, r22
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <DIO_read_pin+0x28>
 3b2:	22 0f       	add	r18, r18
 3b4:	33 1f       	adc	r19, r19
 3b6:	0a 94       	dec	r0
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <DIO_read_pin+0x24>
 3ba:	84 2f       	mov	r24, r20
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	82 23       	and	r24, r18
 3c0:	93 23       	and	r25, r19
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <DIO_read_pin+0x3a>
 3c4:	95 95       	asr	r25
 3c6:	87 95       	ror	r24
 3c8:	6a 95       	dec	r22
 3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <DIO_read_pin+0x36>
 3cc:	08 95       	ret
 3ce:	46 b3       	in	r20, 0x16	; 22
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	9c 01       	movw	r18, r24
 3d6:	06 2e       	mov	r0, r22
 3d8:	02 c0       	rjmp	.+4      	; 0x3de <DIO_read_pin+0x50>
 3da:	22 0f       	add	r18, r18
 3dc:	33 1f       	adc	r19, r19
 3de:	0a 94       	dec	r0
 3e0:	e2 f7       	brpl	.-8      	; 0x3da <DIO_read_pin+0x4c>
 3e2:	84 2f       	mov	r24, r20
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	82 23       	and	r24, r18
 3e8:	93 23       	and	r25, r19
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <DIO_read_pin+0x62>
 3ec:	95 95       	asr	r25
 3ee:	87 95       	ror	r24
 3f0:	6a 95       	dec	r22
 3f2:	e2 f7       	brpl	.-8      	; 0x3ec <DIO_read_pin+0x5e>
 3f4:	08 95       	ret
 3f6:	43 b3       	in	r20, 0x13	; 19
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	9c 01       	movw	r18, r24
 3fe:	06 2e       	mov	r0, r22
 400:	02 c0       	rjmp	.+4      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 402:	22 0f       	add	r18, r18
 404:	33 1f       	adc	r19, r19
 406:	0a 94       	dec	r0
 408:	e2 f7       	brpl	.-8      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 40a:	84 2f       	mov	r24, r20
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	82 23       	and	r24, r18
 410:	93 23       	and	r25, r19
 412:	02 c0       	rjmp	.+4      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 414:	95 95       	asr	r25
 416:	87 95       	ror	r24
 418:	6a 95       	dec	r22
 41a:	e2 f7       	brpl	.-8      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 41c:	08 95       	ret
 41e:	40 b3       	in	r20, 0x10	; 16
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	9c 01       	movw	r18, r24
 426:	06 2e       	mov	r0, r22
 428:	02 c0       	rjmp	.+4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 42a:	22 0f       	add	r18, r18
 42c:	33 1f       	adc	r19, r19
 42e:	0a 94       	dec	r0
 430:	e2 f7       	brpl	.-8      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 432:	84 2f       	mov	r24, r20
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	82 23       	and	r24, r18
 438:	93 23       	and	r25, r19
 43a:	02 c0       	rjmp	.+4      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 43c:	95 95       	asr	r25
 43e:	87 95       	ror	r24
 440:	6a 95       	dec	r22
 442:	e2 f7       	brpl	.-8      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 444:	08 95       	ret
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	08 95       	ret

0000044a <DIO_write_high_nibble>:
	}
}

void DIO_write_high_nibble(unsigned char port,unsigned char number)
{
	number<<=4;
 44a:	62 95       	swap	r22
 44c:	60 7f       	andi	r22, 0xF0	; 240
	switch(port)
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	fc 01       	movw	r30, r24
 452:	e1 54       	subi	r30, 0x41	; 65
 454:	f1 09       	sbc	r31, r1
 456:	e4 32       	cpi	r30, 0x24	; 36
 458:	f1 05       	cpc	r31, r1
 45a:	f8 f4       	brcc	.+62     	; 0x49a <DIO_write_high_nibble+0x50>
 45c:	ea 56       	subi	r30, 0x6A	; 106
 45e:	ff 4f       	sbci	r31, 0xFF	; 255
 460:	0c 94 d6 05 	jmp	0xbac	; 0xbac <__tablejump2__>
	{
		case 'A':
		case 'a':
		PORTA&=0x0F;
 464:	8b b3       	in	r24, 0x1b	; 27
 466:	8f 70       	andi	r24, 0x0F	; 15
 468:	8b bb       	out	0x1b, r24	; 27
		PORTA|=number;
 46a:	8b b3       	in	r24, 0x1b	; 27
 46c:	68 2b       	or	r22, r24
 46e:	6b bb       	out	0x1b, r22	; 27
		break;
 470:	08 95       	ret
		case 'B':
		case 'b':
		PORTB&=0x0F;
 472:	88 b3       	in	r24, 0x18	; 24
 474:	8f 70       	andi	r24, 0x0F	; 15
 476:	88 bb       	out	0x18, r24	; 24
		PORTB|=number;
 478:	88 b3       	in	r24, 0x18	; 24
 47a:	68 2b       	or	r22, r24
 47c:	68 bb       	out	0x18, r22	; 24
		break;
 47e:	08 95       	ret
		case 'C':
		case 'c':
		PORTC&=0x0F;
 480:	85 b3       	in	r24, 0x15	; 21
 482:	8f 70       	andi	r24, 0x0F	; 15
 484:	85 bb       	out	0x15, r24	; 21
		PORTC|=number;
 486:	85 b3       	in	r24, 0x15	; 21
 488:	68 2b       	or	r22, r24
 48a:	65 bb       	out	0x15, r22	; 21
		break;
 48c:	08 95       	ret
		case 'D':
		case 'd':
		PORTD&=0x0F;
 48e:	82 b3       	in	r24, 0x12	; 18
 490:	8f 70       	andi	r24, 0x0F	; 15
 492:	82 bb       	out	0x12, r24	; 18
		PORTD|=number;
 494:	82 b3       	in	r24, 0x12	; 18
 496:	68 2b       	or	r22, r24
 498:	62 bb       	out	0x12, r22	; 18
 49a:	08 95       	ret

0000049c <enable>:
	#endif
}

static void enable(void)
{
	DIO_write_pin(PORT_2,EN,1);
 49c:	41 e0       	ldi	r20, 0x01	; 1
 49e:	62 e0       	ldi	r22, 0x02	; 2
 4a0:	84 e4       	ldi	r24, 0x44	; 68
 4a2:	0e 94 57 01 	call	0x2ae	; 0x2ae <DIO_write_pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4a6:	8f e9       	ldi	r24, 0x9F	; 159
 4a8:	9f e0       	ldi	r25, 0x0F	; 15
 4aa:	01 97       	sbiw	r24, 0x01	; 1
 4ac:	f1 f7       	brne	.-4      	; 0x4aa <enable+0xe>
 4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <enable+0x14>
 4b0:	00 00       	nop
	_delay_ms(2);
	DIO_write_pin(PORT_2,EN,0);
 4b2:	40 e0       	ldi	r20, 0x00	; 0
 4b4:	62 e0       	ldi	r22, 0x02	; 2
 4b6:	84 e4       	ldi	r24, 0x44	; 68
 4b8:	0e 94 57 01 	call	0x2ae	; 0x2ae <DIO_write_pin>
 4bc:	8f e9       	ldi	r24, 0x9F	; 159
 4be:	9f e0       	ldi	r25, 0x0F	; 15
 4c0:	01 97       	sbiw	r24, 0x01	; 1
 4c2:	f1 f7       	brne	.-4      	; 0x4c0 <enable+0x24>
 4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <enable+0x2a>
 4c6:	00 00       	nop
 4c8:	08 95       	ret

000004ca <LCD_send_cmd>:
	_delay_ms(2);
}

void LCD_send_cmd(char cmd)
{
 4ca:	cf 93       	push	r28
 4cc:	c8 2f       	mov	r28, r24
	DIO_write_pin(PORT_2,RS,0);
 4ce:	40 e0       	ldi	r20, 0x00	; 0
 4d0:	60 e0       	ldi	r22, 0x00	; 0
 4d2:	84 e4       	ldi	r24, 0x44	; 68
 4d4:	0e 94 57 01 	call	0x2ae	; 0x2ae <DIO_write_pin>
	#if defined eight_bits_mode
	DIO_write_port(PORT_1,cmd);
	enable();
	#elif defined four_bits_mode
	DIO_write_high_nibble(PORT_1,cmd>>4);
 4d8:	6c 2f       	mov	r22, r28
 4da:	62 95       	swap	r22
 4dc:	6f 70       	andi	r22, 0x0F	; 15
 4de:	84 e4       	ldi	r24, 0x44	; 68
 4e0:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_write_high_nibble>
	enable();
 4e4:	0e 94 4e 02 	call	0x49c	; 0x49c <enable>
	DIO_write_high_nibble(PORT_1,cmd);
 4e8:	6c 2f       	mov	r22, r28
 4ea:	84 e4       	ldi	r24, 0x44	; 68
 4ec:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_write_high_nibble>
	enable();
 4f0:	0e 94 4e 02 	call	0x49c	; 0x49c <enable>
 4f4:	8f ec       	ldi	r24, 0xCF	; 207
 4f6:	97 e0       	ldi	r25, 0x07	; 7
 4f8:	01 97       	sbiw	r24, 0x01	; 1
 4fa:	f1 f7       	brne	.-4      	; 0x4f8 <LCD_send_cmd+0x2e>
 4fc:	00 c0       	rjmp	.+0      	; 0x4fe <LCD_send_cmd+0x34>
 4fe:	00 00       	nop
	#endif
	_delay_ms(1);
}
 500:	cf 91       	pop	r28
 502:	08 95       	ret

00000504 <LCD_init>:
 504:	2f ef       	ldi	r18, 0xFF	; 255
 506:	81 ee       	ldi	r24, 0xE1	; 225
 508:	94 e0       	ldi	r25, 0x04	; 4
 50a:	21 50       	subi	r18, 0x01	; 1
 50c:	80 40       	sbci	r24, 0x00	; 0
 50e:	90 40       	sbci	r25, 0x00	; 0
 510:	e1 f7       	brne	.-8      	; 0x50a <LCD_init+0x6>
 512:	00 c0       	rjmp	.+0      	; 0x514 <LCD_init+0x10>
 514:	00 00       	nop
	_delay_ms(1);
	LCD_send_cmd(ENTRY_MODE);  //sift curson to right
	_delay_ms(1);
	
	#elif defined four_bits_mode
	DIO_set_pin_dir(PORT_1,4,1);
 516:	41 e0       	ldi	r20, 0x01	; 1
 518:	64 e0       	ldi	r22, 0x04	; 4
 51a:	84 e4       	ldi	r24, 0x44	; 68
 51c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_set_pin_dir>
	DIO_set_pin_dir(PORT_1,5,1);
 520:	41 e0       	ldi	r20, 0x01	; 1
 522:	65 e0       	ldi	r22, 0x05	; 5
 524:	84 e4       	ldi	r24, 0x44	; 68
 526:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_set_pin_dir>
	DIO_set_pin_dir(PORT_1,6,1);
 52a:	41 e0       	ldi	r20, 0x01	; 1
 52c:	66 e0       	ldi	r22, 0x06	; 6
 52e:	84 e4       	ldi	r24, 0x44	; 68
 530:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_set_pin_dir>
	DIO_set_pin_dir(PORT_1,7,1);
 534:	41 e0       	ldi	r20, 0x01	; 1
 536:	67 e0       	ldi	r22, 0x07	; 7
 538:	84 e4       	ldi	r24, 0x44	; 68
 53a:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_set_pin_dir>
	DIO_set_pin_dir(PORT_2,EN,1);
 53e:	41 e0       	ldi	r20, 0x01	; 1
 540:	62 e0       	ldi	r22, 0x02	; 2
 542:	84 e4       	ldi	r24, 0x44	; 68
 544:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_set_pin_dir>
	DIO_set_pin_dir(PORT_2,RW,1);
 548:	41 e0       	ldi	r20, 0x01	; 1
 54a:	61 e0       	ldi	r22, 0x01	; 1
 54c:	84 e4       	ldi	r24, 0x44	; 68
 54e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_set_pin_dir>
	DIO_set_pin_dir(PORT_2,RS,1);
 552:	41 e0       	ldi	r20, 0x01	; 1
 554:	60 e0       	ldi	r22, 0x00	; 0
 556:	84 e4       	ldi	r24, 0x44	; 68
 558:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_set_pin_dir>
	DIO_write_pin(PORT_2,RW,0);	
 55c:	40 e0       	ldi	r20, 0x00	; 0
 55e:	61 e0       	ldi	r22, 0x01	; 1
 560:	84 e4       	ldi	r24, 0x44	; 68
 562:	0e 94 57 01 	call	0x2ae	; 0x2ae <DIO_write_pin>
	
	LCD_send_cmd(RETURN_HOME); //4_bits_mode //return home
 566:	82 e0       	ldi	r24, 0x02	; 2
 568:	0e 94 65 02 	call	0x4ca	; 0x4ca <LCD_send_cmd>
 56c:	8f e1       	ldi	r24, 0x1F	; 31
 56e:	9e e4       	ldi	r25, 0x4E	; 78
 570:	01 97       	sbiw	r24, 0x01	; 1
 572:	f1 f7       	brne	.-4      	; 0x570 <LCD_init+0x6c>
 574:	00 c0       	rjmp	.+0      	; 0x576 <LCD_init+0x72>
 576:	00 00       	nop
	_delay_ms(10);
	LCD_send_cmd(FOUR_BITS);  //4_bits_mode
 578:	88 e2       	ldi	r24, 0x28	; 40
 57a:	0e 94 65 02 	call	0x4ca	; 0x4ca <LCD_send_cmd>
 57e:	8f ec       	ldi	r24, 0xCF	; 207
 580:	97 e0       	ldi	r25, 0x07	; 7
 582:	01 97       	sbiw	r24, 0x01	; 1
 584:	f1 f7       	brne	.-4      	; 0x582 <LCD_init+0x7e>
 586:	00 c0       	rjmp	.+0      	; 0x588 <LCD_init+0x84>
 588:	00 00       	nop
	_delay_ms(1);
	LCD_send_cmd(CLR_SCREEN);  //clear screen
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	0e 94 65 02 	call	0x4ca	; 0x4ca <LCD_send_cmd>
 590:	8f e1       	ldi	r24, 0x1F	; 31
 592:	9e e4       	ldi	r25, 0x4E	; 78
 594:	01 97       	sbiw	r24, 0x01	; 1
 596:	f1 f7       	brne	.-4      	; 0x594 <LCD_init+0x90>
 598:	00 c0       	rjmp	.+0      	; 0x59a <LCD_init+0x96>
 59a:	00 00       	nop
	_delay_ms(10);
	LCD_send_cmd(CURSOR_Off_DISPLAY_ON); //curson on, display on
 59c:	8c e0       	ldi	r24, 0x0C	; 12
 59e:	0e 94 65 02 	call	0x4ca	; 0x4ca <LCD_send_cmd>
 5a2:	8f ec       	ldi	r24, 0xCF	; 207
 5a4:	97 e0       	ldi	r25, 0x07	; 7
 5a6:	01 97       	sbiw	r24, 0x01	; 1
 5a8:	f1 f7       	brne	.-4      	; 0x5a6 <LCD_init+0xa2>
 5aa:	00 c0       	rjmp	.+0      	; 0x5ac <LCD_init+0xa8>
 5ac:	00 00       	nop
	_delay_ms(1);
	LCD_send_cmd(ENTRY_MODE);  //sift curson to right
 5ae:	86 e0       	ldi	r24, 0x06	; 6
 5b0:	0e 94 65 02 	call	0x4ca	; 0x4ca <LCD_send_cmd>
 5b4:	8f ec       	ldi	r24, 0xCF	; 207
 5b6:	97 e0       	ldi	r25, 0x07	; 7
 5b8:	01 97       	sbiw	r24, 0x01	; 1
 5ba:	f1 f7       	brne	.-4      	; 0x5b8 <LCD_init+0xb4>
 5bc:	00 c0       	rjmp	.+0      	; 0x5be <LCD_init+0xba>
 5be:	00 00       	nop
 5c0:	08 95       	ret

000005c2 <LCD_send_data>:
	#endif
	_delay_ms(1);
}

void LCD_send_data(char data)
{
 5c2:	cf 93       	push	r28
 5c4:	c8 2f       	mov	r28, r24
	DIO_write_pin(PORT_2,RS,1);
 5c6:	41 e0       	ldi	r20, 0x01	; 1
 5c8:	60 e0       	ldi	r22, 0x00	; 0
 5ca:	84 e4       	ldi	r24, 0x44	; 68
 5cc:	0e 94 57 01 	call	0x2ae	; 0x2ae <DIO_write_pin>
	#if defined eight_bits_mode
	DIO_write_port(PORT_1,data);
	enable();
	
	#elif defined four_bits_mode
	DIO_write_high_nibble(PORT_1,data>>4);
 5d0:	6c 2f       	mov	r22, r28
 5d2:	62 95       	swap	r22
 5d4:	6f 70       	andi	r22, 0x0F	; 15
 5d6:	84 e4       	ldi	r24, 0x44	; 68
 5d8:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_write_high_nibble>
	enable();
 5dc:	0e 94 4e 02 	call	0x49c	; 0x49c <enable>
	DIO_write_high_nibble(PORT_1,data);
 5e0:	6c 2f       	mov	r22, r28
 5e2:	84 e4       	ldi	r24, 0x44	; 68
 5e4:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_write_high_nibble>
	enable();
 5e8:	0e 94 4e 02 	call	0x49c	; 0x49c <enable>
	#endif
	
}
 5ec:	cf 91       	pop	r28
 5ee:	08 95       	ret

000005f0 <LCD_send_string>:

void LCD_send_string(char* string)
{
 5f0:	cf 93       	push	r28
 5f2:	df 93       	push	r29
 5f4:	ec 01       	movw	r28, r24
	while((*string!='\0'))
 5f6:	03 c0       	rjmp	.+6      	; 0x5fe <LCD_send_string+0xe>
	{
		LCD_send_data(*string);
 5f8:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <LCD_send_data>
		string++;
 5fc:	21 96       	adiw	r28, 0x01	; 1
	
}

void LCD_send_string(char* string)
{
	while((*string!='\0'))
 5fe:	88 81       	ld	r24, Y
 600:	81 11       	cpse	r24, r1
 602:	fa cf       	rjmp	.-12     	; 0x5f8 <LCD_send_string+0x8>
	{
		LCD_send_data(*string);
		string++;
	}
}
 604:	df 91       	pop	r29
 606:	cf 91       	pop	r28
 608:	08 95       	ret

0000060a <LCD_clr_screen>:

void LCD_clr_screen(void)
{
	LCD_send_cmd(CLR_SCREEN);
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	0e 94 65 02 	call	0x4ca	; 0x4ca <LCD_send_cmd>
 610:	8f e1       	ldi	r24, 0x1F	; 31
 612:	9e e4       	ldi	r25, 0x4E	; 78
 614:	01 97       	sbiw	r24, 0x01	; 1
 616:	f1 f7       	brne	.-4      	; 0x614 <LCD_clr_screen+0xa>
 618:	00 c0       	rjmp	.+0      	; 0x61a <LCD_clr_screen+0x10>
 61a:	00 00       	nop
 61c:	08 95       	ret

0000061e <LCD_move_cursor>:
}

void LCD_move_cursor(char row,char coloum)
{
	char data=0;
	if (row>2 || row<1 || coloum>16 || coloum<1)
 61e:	9f ef       	ldi	r25, 0xFF	; 255
 620:	98 0f       	add	r25, r24
 622:	92 30       	cpi	r25, 0x02	; 2
 624:	70 f4       	brcc	.+28     	; 0x642 <LCD_move_cursor+0x24>
 626:	61 31       	cpi	r22, 0x11	; 17
 628:	70 f4       	brcc	.+28     	; 0x646 <LCD_move_cursor+0x28>
 62a:	66 23       	and	r22, r22
 62c:	71 f0       	breq	.+28     	; 0x64a <LCD_move_cursor+0x2c>
	{
		data=0x80;
	}
	else if (row==1)
 62e:	81 30       	cpi	r24, 0x01	; 1
 630:	19 f4       	brne	.+6      	; 0x638 <LCD_move_cursor+0x1a>
	{
		data=(0x80+coloum-1);
 632:	8f e7       	ldi	r24, 0x7F	; 127
 634:	86 0f       	add	r24, r22
 636:	0c c0       	rjmp	.+24     	; 0x650 <LCD_move_cursor+0x32>
	}
	else if (row==2)
 638:	82 30       	cpi	r24, 0x02	; 2
 63a:	49 f4       	brne	.+18     	; 0x64e <LCD_move_cursor+0x30>
	{
		data=(0xC0+coloum-1);
 63c:	8f eb       	ldi	r24, 0xBF	; 191
 63e:	86 0f       	add	r24, r22
 640:	07 c0       	rjmp	.+14     	; 0x650 <LCD_move_cursor+0x32>
void LCD_move_cursor(char row,char coloum)
{
	char data=0;
	if (row>2 || row<1 || coloum>16 || coloum<1)
	{
		data=0x80;
 642:	80 e8       	ldi	r24, 0x80	; 128
 644:	05 c0       	rjmp	.+10     	; 0x650 <LCD_move_cursor+0x32>
 646:	80 e8       	ldi	r24, 0x80	; 128
 648:	03 c0       	rjmp	.+6      	; 0x650 <LCD_move_cursor+0x32>
 64a:	80 e8       	ldi	r24, 0x80	; 128
 64c:	01 c0       	rjmp	.+2      	; 0x650 <LCD_move_cursor+0x32>
	_delay_ms(10);
}

void LCD_move_cursor(char row,char coloum)
{
	char data=0;
 64e:	80 e0       	ldi	r24, 0x00	; 0
	}
	else if (row==2)
	{
		data=(0xC0+coloum-1);
	}
	LCD_send_cmd(data);
 650:	0e 94 65 02 	call	0x4ca	; 0x4ca <LCD_send_cmd>
 654:	8f ec       	ldi	r24, 0xCF	; 207
 656:	97 e0       	ldi	r25, 0x07	; 7
 658:	01 97       	sbiw	r24, 0x01	; 1
 65a:	f1 f7       	brne	.-4      	; 0x658 <LCD_move_cursor+0x3a>
 65c:	00 c0       	rjmp	.+0      	; 0x65e <LCD_move_cursor+0x40>
 65e:	00 00       	nop
 660:	08 95       	ret

00000662 <LED_init>:
#include "LED.h"
#include "DIO.h"

void LED_init(unsigned char port,unsigned char pin_number)
{
	DIO_set_pin_dir(port,pin_number,1);
 662:	41 e0       	ldi	r20, 0x01	; 1
 664:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_set_pin_dir>
 668:	08 95       	ret

0000066a <LED_turn_on>:
}

void LED_turn_on(unsigned char port,unsigned char pin_number)
{
	DIO_write_pin(port,pin_number,1);
 66a:	41 e0       	ldi	r20, 0x01	; 1
 66c:	0e 94 57 01 	call	0x2ae	; 0x2ae <DIO_write_pin>
 670:	08 95       	ret

00000672 <LED_turn_off>:
}

void LED_turn_off(unsigned char port,unsigned char pin_number)
{
	DIO_write_pin(port,pin_number,0);
 672:	40 e0       	ldi	r20, 0x00	; 0
 674:	0e 94 57 01 	call	0x2ae	; 0x2ae <DIO_write_pin>
 678:	08 95       	ret

0000067a <main>:



int main(void)
{
   LCD_init();
 67a:	0e 94 82 02 	call	0x504	; 0x504 <LCD_init>
   BUTTON_init_with_pull_up('B',0);
 67e:	60 e0       	ldi	r22, 0x00	; 0
 680:	82 e4       	ldi	r24, 0x42	; 66
 682:	0e 94 d5 00 	call	0x1aa	; 0x1aa <BUTTON_init_with_pull_up>
   BUTTON_init_with_pull_up('B',1);
 686:	61 e0       	ldi	r22, 0x01	; 1
 688:	82 e4       	ldi	r24, 0x42	; 66
 68a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <BUTTON_init_with_pull_up>
   BUTTON_init_with_pull_up('B',2);
 68e:	62 e0       	ldi	r22, 0x02	; 2
 690:	82 e4       	ldi	r24, 0x42	; 66
 692:	0e 94 d5 00 	call	0x1aa	; 0x1aa <BUTTON_init_with_pull_up>
   BUTTON_init_with_pull_up('B',3);
 696:	63 e0       	ldi	r22, 0x03	; 3
 698:	82 e4       	ldi	r24, 0x42	; 66
 69a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <BUTTON_init_with_pull_up>
   BUTTON_init_with_pull_up('B',4);
 69e:	64 e0       	ldi	r22, 0x04	; 4
 6a0:	82 e4       	ldi	r24, 0x42	; 66
 6a2:	0e 94 d5 00 	call	0x1aa	; 0x1aa <BUTTON_init_with_pull_up>
   BUTTON_init('A',0);
 6a6:	60 e0       	ldi	r22, 0x00	; 0
 6a8:	81 e4       	ldi	r24, 0x41	; 65
 6aa:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <BUTTON_init>
   BUTTON_init('A',1);
 6ae:	61 e0       	ldi	r22, 0x01	; 1
 6b0:	81 e4       	ldi	r24, 0x41	; 65
 6b2:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <BUTTON_init>
   LED_init('C',0);
 6b6:	60 e0       	ldi	r22, 0x00	; 0
 6b8:	83 e4       	ldi	r24, 0x43	; 67
 6ba:	0e 94 31 03 	call	0x662	; 0x662 <LED_init>
   LED_init('C',1);
 6be:	61 e0       	ldi	r22, 0x01	; 1
 6c0:	83 e4       	ldi	r24, 0x43	; 67
 6c2:	0e 94 31 03 	call	0x662	; 0x662 <LED_init>
   LED_init('C',2);
 6c6:	62 e0       	ldi	r22, 0x02	; 2
 6c8:	83 e4       	ldi	r24, 0x43	; 67
 6ca:	0e 94 31 03 	call	0x662	; 0x662 <LED_init>
   LED_init('C',3);
 6ce:	63 e0       	ldi	r22, 0x03	; 3
 6d0:	83 e4       	ldi	r24, 0x43	; 67
 6d2:	0e 94 31 03 	call	0x662	; 0x662 <LED_init>
   LED_init('C',4);
 6d6:	64 e0       	ldi	r22, 0x04	; 4
 6d8:	83 e4       	ldi	r24, 0x43	; 67
 6da:	0e 94 31 03 	call	0x662	; 0x662 <LED_init>
   LED_init('C',5);
 6de:	65 e0       	ldi	r22, 0x05	; 5
 6e0:	83 e4       	ldi	r24, 0x43	; 67
 6e2:	0e 94 31 03 	call	0x662	; 0x662 <LED_init>
   LED_init('C',6);
 6e6:	66 e0       	ldi	r22, 0x06	; 6
 6e8:	83 e4       	ldi	r24, 0x43	; 67
 6ea:	0e 94 31 03 	call	0x662	; 0x662 <LED_init>
   char counter1=0,counter2=0,counter3=0,counter4=0;
   char value1,value2,value3,value4;
   char flag1,flag2,flag3,flag4;
   char enter=0;
   char responsible_flag=0;
   LCD_send_string("A=0");
 6ee:	80 e6       	ldi	r24, 0x60	; 96
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <LCD_send_string>
   LCD_move_cursor(1,12);
 6f6:	6c e0       	ldi	r22, 0x0C	; 12
 6f8:	81 e0       	ldi	r24, 0x01	; 1
 6fa:	0e 94 0f 03 	call	0x61e	; 0x61e <LCD_move_cursor>
   LCD_send_string("B=0");
 6fe:	84 e6       	ldi	r24, 0x64	; 100
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <LCD_send_string>
   LCD_move_cursor(2,1);
 706:	61 e0       	ldi	r22, 0x01	; 1
 708:	82 e0       	ldi	r24, 0x02	; 2
 70a:	0e 94 0f 03 	call	0x61e	; 0x61e <LCD_move_cursor>
   LCD_send_string("C=0");
 70e:	88 e6       	ldi	r24, 0x68	; 104
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <LCD_send_string>
   LCD_move_cursor(2,12);
 716:	6c e0       	ldi	r22, 0x0C	; 12
 718:	82 e0       	ldi	r24, 0x02	; 2
 71a:	0e 94 0f 03 	call	0x61e	; 0x61e <LCD_move_cursor>
   LCD_send_string("D=0");
 71e:	8c e6       	ldi	r24, 0x6C	; 108
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <LCD_send_string>
   LED_init('C',2);
   LED_init('C',3);
   LED_init('C',4);
   LED_init('C',5);
   LED_init('C',6);
   char counter1=0,counter2=0,counter3=0,counter4=0;
 726:	71 2c       	mov	r7, r1
 728:	81 2c       	mov	r8, r1
 72a:	91 2c       	mov	r9, r1
 72c:	a1 2c       	mov	r10, r1
		LCD_send_data((counter3%10)+48);
		LCD_move_cursor(2,14);
		LCD_send_data((counter4/10)+48);
		LCD_send_data((counter4%10)+48);;
		
    }
 72e:	f7 2c       	mov	r15, r7
 730:	08 2d       	mov	r16, r8
 732:	19 2d       	mov	r17, r9
 734:	da 2d       	mov	r29, r10
		value2=counter2;
		value3=counter3;
		value4=counter4;
		do 
		{
			LED_turn_off('C',5);
 736:	65 e0       	ldi	r22, 0x05	; 5
 738:	83 e4       	ldi	r24, 0x43	; 67
 73a:	0e 94 39 03 	call	0x672	; 0x672 <LED_turn_off>
			LED_turn_on('C',4);
 73e:	64 e0       	ldi	r22, 0x04	; 4
 740:	83 e4       	ldi	r24, 0x43	; 67
 742:	0e 94 35 03 	call	0x66a	; 0x66a <LED_turn_on>
			if (1==BUTTON_read('A',1))
 746:	61 e0       	ldi	r22, 0x01	; 1
 748:	81 e4       	ldi	r24, 0x41	; 65
 74a:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <BUTTON_read>
 74e:	81 30       	cpi	r24, 0x01	; 1
 750:	51 f5       	brne	.+84     	; 0x7a6 <main+0x12c>
			{
				LED_turn_off('C',6);
 752:	66 e0       	ldi	r22, 0x06	; 6
 754:	83 e4       	ldi	r24, 0x43	; 67
 756:	0e 94 39 03 	call	0x672	; 0x672 <LED_turn_off>
				counter1=counter2=counter3=counter4=0;
				LCD_clr_screen();
 75a:	0e 94 05 03 	call	0x60a	; 0x60a <LCD_clr_screen>
				LCD_move_cursor(1,1);
 75e:	61 e0       	ldi	r22, 0x01	; 1
 760:	81 e0       	ldi	r24, 0x01	; 1
 762:	0e 94 0f 03 	call	0x61e	; 0x61e <LCD_move_cursor>
				LCD_send_string("A=0");
 766:	80 e6       	ldi	r24, 0x60	; 96
 768:	90 e0       	ldi	r25, 0x00	; 0
 76a:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <LCD_send_string>
				LCD_move_cursor(1,12);
 76e:	6c e0       	ldi	r22, 0x0C	; 12
 770:	81 e0       	ldi	r24, 0x01	; 1
 772:	0e 94 0f 03 	call	0x61e	; 0x61e <LCD_move_cursor>
				LCD_send_string("B=0");
 776:	84 e6       	ldi	r24, 0x64	; 100
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <LCD_send_string>
				LCD_move_cursor(2,1);
 77e:	61 e0       	ldi	r22, 0x01	; 1
 780:	82 e0       	ldi	r24, 0x02	; 2
 782:	0e 94 0f 03 	call	0x61e	; 0x61e <LCD_move_cursor>
				LCD_send_string("C=0");
 786:	88 e6       	ldi	r24, 0x68	; 104
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <LCD_send_string>
				LCD_move_cursor(2,12);
 78e:	6c e0       	ldi	r22, 0x0C	; 12
 790:	82 e0       	ldi	r24, 0x02	; 2
 792:	0e 94 0f 03 	call	0x61e	; 0x61e <LCD_move_cursor>
				LCD_send_string("D=0");
 796:	8c e6       	ldi	r24, 0x6C	; 108
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <LCD_send_string>
			LED_turn_off('C',5);
			LED_turn_on('C',4);
			if (1==BUTTON_read('A',1))
			{
				LED_turn_off('C',6);
				counter1=counter2=counter3=counter4=0;
 79e:	f1 2c       	mov	r15, r1
 7a0:	00 e0       	ldi	r16, 0x00	; 0
 7a2:	10 e0       	ldi	r17, 0x00	; 0
 7a4:	d0 e0       	ldi	r29, 0x00	; 0
				LCD_move_cursor(2,1);
				LCD_send_string("C=0");
				LCD_move_cursor(2,12);
				LCD_send_string("D=0");
			}
			responsible_flag=BUTTON_read('A',0);
 7a6:	60 e0       	ldi	r22, 0x00	; 0
 7a8:	81 e4       	ldi	r24, 0x41	; 65
 7aa:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <BUTTON_read>
 7ae:	c8 2f       	mov	r28, r24
			if (1==responsible_flag)
 7b0:	81 30       	cpi	r24, 0x01	; 1
 7b2:	61 f4       	brne	.+24     	; 0x7cc <main+0x152>
			{
				LED_turn_off('C',6);
 7b4:	66 e0       	ldi	r22, 0x06	; 6
 7b6:	83 e4       	ldi	r24, 0x43	; 67
 7b8:	0e 94 39 03 	call	0x672	; 0x672 <LED_turn_off>
				LED_turn_off('C',4);
 7bc:	64 e0       	ldi	r22, 0x04	; 4
 7be:	83 e4       	ldi	r24, 0x43	; 67
 7c0:	0e 94 39 03 	call	0x672	; 0x672 <LED_turn_off>
				LED_turn_on('C',5);
 7c4:	65 e0       	ldi	r22, 0x05	; 5
 7c6:	83 e4       	ldi	r24, 0x43	; 67
 7c8:	0e 94 35 03 	call	0x66a	; 0x66a <LED_turn_on>
			}
		} while (0==responsible_flag);
 7cc:	cc 23       	and	r28, r28
 7ce:	09 f4       	brne	.+2      	; 0x7d2 <main+0x158>
 7d0:	b2 cf       	rjmp	.-156    	; 0x736 <main+0xbc>
 7d2:	b1 2c       	mov	r11, r1
 7d4:	c1 2c       	mov	r12, r1
 7d6:	d1 2c       	mov	r13, r1
 7d8:	e1 2c       	mov	r14, r1
		
label:	do
		{
			if (0==BUTTON_read('B',0))
 7da:	60 e0       	ldi	r22, 0x00	; 0
 7dc:	82 e4       	ldi	r24, 0x42	; 66
 7de:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <BUTTON_read>
 7e2:	81 11       	cpse	r24, r1
 7e4:	2e c0       	rjmp	.+92     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
			{
				if (0==flag1)
 7e6:	e1 10       	cpse	r14, r1
 7e8:	25 c0       	rjmp	.+74     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
				{
					if (1==flag2)
 7ea:	21 e0       	ldi	r18, 0x01	; 1
 7ec:	d2 12       	cpse	r13, r18
 7ee:	07 c0       	rjmp	.+14     	; 0x7fe <main+0x184>
					{
						counter2--;
 7f0:	11 50       	subi	r17, 0x01	; 1
						flag2=0;
						LED_turn_off('C',1);
 7f2:	61 e0       	ldi	r22, 0x01	; 1
 7f4:	83 e4       	ldi	r24, 0x43	; 67
 7f6:	0e 94 39 03 	call	0x672	; 0x672 <LED_turn_off>
				if (0==flag1)
				{
					if (1==flag2)
					{
						counter2--;
						flag2=0;
 7fa:	de 2c       	mov	r13, r14
 7fc:	13 c0       	rjmp	.+38     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
						LED_turn_off('C',1);
					}
					else if (1==flag3)
 7fe:	81 e0       	ldi	r24, 0x01	; 1
 800:	c8 12       	cpse	r12, r24
 802:	07 c0       	rjmp	.+14     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
					{
						counter3--;
 804:	01 50       	subi	r16, 0x01	; 1
						flag3=0;
						LED_turn_off('C',2);
 806:	62 e0       	ldi	r22, 0x02	; 2
 808:	83 e4       	ldi	r24, 0x43	; 67
 80a:	0e 94 39 03 	call	0x672	; 0x672 <LED_turn_off>
						LED_turn_off('C',1);
					}
					else if (1==flag3)
					{
						counter3--;
						flag3=0;
 80e:	ce 2c       	mov	r12, r14
 810:	09 c0       	rjmp	.+18     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
						LED_turn_off('C',2);
					}
					else if (1==flag4)
 812:	91 e0       	ldi	r25, 0x01	; 1
 814:	b9 12       	cpse	r11, r25
 816:	06 c0       	rjmp	.+12     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
					{
						counter4--;
 818:	fa 94       	dec	r15
						flag4=0;
						LED_turn_off('C',3);
 81a:	63 e0       	ldi	r22, 0x03	; 3
 81c:	83 e4       	ldi	r24, 0x43	; 67
 81e:	0e 94 39 03 	call	0x672	; 0x672 <LED_turn_off>
						LED_turn_off('C',2);
					}
					else if (1==flag4)
					{
						counter4--;
						flag4=0;
 822:	be 2c       	mov	r11, r14
					}
					else
					{
						
					}
					counter1++;
 824:	df 5f       	subi	r29, 0xFF	; 255
					flag1=1;
					LED_turn_on('C',0);
 826:	60 e0       	ldi	r22, 0x00	; 0
 828:	83 e4       	ldi	r24, 0x43	; 67
 82a:	0e 94 35 03 	call	0x66a	; 0x66a <LED_turn_on>
					else
					{
						
					}
					counter1++;
					flag1=1;
 82e:	ee 24       	eor	r14, r14
 830:	e3 94       	inc	r14
 832:	a2 c0       	rjmp	.+324    	; 0x978 <__stack+0x119>
					LED_turn_on('C',0);
				}
				else
				{
					counter1--;
 834:	d1 50       	subi	r29, 0x01	; 1
					flag1=0;
					LED_turn_off('C',0);
 836:	60 e0       	ldi	r22, 0x00	; 0
 838:	83 e4       	ldi	r24, 0x43	; 67
 83a:	0e 94 39 03 	call	0x672	; 0x672 <LED_turn_off>
					LED_turn_on('C',0);
				}
				else
				{
					counter1--;
					flag1=0;
 83e:	e1 2c       	mov	r14, r1
 840:	9b c0       	rjmp	.+310    	; 0x978 <__stack+0x119>
					LED_turn_off('C',0);
				}
				
			}
			else if (0==BUTTON_read('B',1))
 842:	61 e0       	ldi	r22, 0x01	; 1
 844:	82 e4       	ldi	r24, 0x42	; 66
 846:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <BUTTON_read>
 84a:	81 11       	cpse	r24, r1
 84c:	2e c0       	rjmp	.+92     	; 0x8aa <__stack+0x4b>
			{
				if (0==flag2)
 84e:	d1 10       	cpse	r13, r1
 850:	25 c0       	rjmp	.+74     	; 0x89c <__stack+0x3d>
				{
					if (1==flag1)
 852:	21 e0       	ldi	r18, 0x01	; 1
 854:	e2 12       	cpse	r14, r18
 856:	07 c0       	rjmp	.+14     	; 0x866 <__stack+0x7>
					{
						counter1--;
 858:	d1 50       	subi	r29, 0x01	; 1
						flag1=0;
						LED_turn_off('C',0);
 85a:	60 e0       	ldi	r22, 0x00	; 0
 85c:	83 e4       	ldi	r24, 0x43	; 67
 85e:	0e 94 39 03 	call	0x672	; 0x672 <LED_turn_off>
				if (0==flag2)
				{
					if (1==flag1)
					{
						counter1--;
						flag1=0;
 862:	ed 2c       	mov	r14, r13
 864:	13 c0       	rjmp	.+38     	; 0x88c <__stack+0x2d>
						LED_turn_off('C',0);
					}
					else if (1==flag3)
 866:	81 e0       	ldi	r24, 0x01	; 1
 868:	c8 12       	cpse	r12, r24
 86a:	07 c0       	rjmp	.+14     	; 0x87a <__stack+0x1b>
					{
						counter3--;
 86c:	01 50       	subi	r16, 0x01	; 1
						flag3=0;
						LED_turn_off('C',2);
 86e:	62 e0       	ldi	r22, 0x02	; 2
 870:	83 e4       	ldi	r24, 0x43	; 67
 872:	0e 94 39 03 	call	0x672	; 0x672 <LED_turn_off>
						LED_turn_off('C',0);
					}
					else if (1==flag3)
					{
						counter3--;
						flag3=0;
 876:	cd 2c       	mov	r12, r13
 878:	09 c0       	rjmp	.+18     	; 0x88c <__stack+0x2d>
						LED_turn_off('C',2);
					}
					else if (1==flag4)
 87a:	91 e0       	ldi	r25, 0x01	; 1
 87c:	b9 12       	cpse	r11, r25
 87e:	06 c0       	rjmp	.+12     	; 0x88c <__stack+0x2d>
					{
						counter4--;
 880:	fa 94       	dec	r15
						flag4=0;
						LED_turn_off('C',3);
 882:	63 e0       	ldi	r22, 0x03	; 3
 884:	83 e4       	ldi	r24, 0x43	; 67
 886:	0e 94 39 03 	call	0x672	; 0x672 <LED_turn_off>
						LED_turn_off('C',2);
					}
					else if (1==flag4)
					{
						counter4--;
						flag4=0;
 88a:	bd 2c       	mov	r11, r13
						LED_turn_off('C',3);
					}
					counter2++;
 88c:	1f 5f       	subi	r17, 0xFF	; 255
					flag2=1;
					LED_turn_on('C',1);
 88e:	61 e0       	ldi	r22, 0x01	; 1
 890:	83 e4       	ldi	r24, 0x43	; 67
 892:	0e 94 35 03 	call	0x66a	; 0x66a <LED_turn_on>
						counter4--;
						flag4=0;
						LED_turn_off('C',3);
					}
					counter2++;
					flag2=1;
 896:	dd 24       	eor	r13, r13
 898:	d3 94       	inc	r13
 89a:	6e c0       	rjmp	.+220    	; 0x978 <__stack+0x119>
					LED_turn_on('C',1);
				}
				else
				{
					counter2--;
 89c:	11 50       	subi	r17, 0x01	; 1
					flag2=0;
					LED_turn_off('C',1);
 89e:	61 e0       	ldi	r22, 0x01	; 1
 8a0:	83 e4       	ldi	r24, 0x43	; 67
 8a2:	0e 94 39 03 	call	0x672	; 0x672 <LED_turn_off>
					LED_turn_on('C',1);
				}
				else
				{
					counter2--;
					flag2=0;
 8a6:	d1 2c       	mov	r13, r1
 8a8:	67 c0       	rjmp	.+206    	; 0x978 <__stack+0x119>
					LED_turn_off('C',1);
				}
				
			}
			else if (0==BUTTON_read('B',2))
 8aa:	62 e0       	ldi	r22, 0x02	; 2
 8ac:	82 e4       	ldi	r24, 0x42	; 66
 8ae:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <BUTTON_read>
 8b2:	81 11       	cpse	r24, r1
 8b4:	2e c0       	rjmp	.+92     	; 0x912 <__stack+0xb3>
			{
				if (0==flag3)
 8b6:	c1 10       	cpse	r12, r1
 8b8:	25 c0       	rjmp	.+74     	; 0x904 <__stack+0xa5>
				{
					if (1==flag1)
 8ba:	21 e0       	ldi	r18, 0x01	; 1
 8bc:	e2 12       	cpse	r14, r18
 8be:	07 c0       	rjmp	.+14     	; 0x8ce <__stack+0x6f>
					{
						counter1--;
 8c0:	d1 50       	subi	r29, 0x01	; 1
						flag1=0;
						LED_turn_off('C',0);
 8c2:	60 e0       	ldi	r22, 0x00	; 0
 8c4:	83 e4       	ldi	r24, 0x43	; 67
 8c6:	0e 94 39 03 	call	0x672	; 0x672 <LED_turn_off>
				if (0==flag3)
				{
					if (1==flag1)
					{
						counter1--;
						flag1=0;
 8ca:	ec 2c       	mov	r14, r12
 8cc:	13 c0       	rjmp	.+38     	; 0x8f4 <__stack+0x95>
						LED_turn_off('C',0);
					}
					else if (1==flag2)
 8ce:	81 e0       	ldi	r24, 0x01	; 1
 8d0:	d8 12       	cpse	r13, r24
 8d2:	07 c0       	rjmp	.+14     	; 0x8e2 <__stack+0x83>
					{
						counter2--;
 8d4:	11 50       	subi	r17, 0x01	; 1
						flag2=0;
						LED_turn_off('C',1);
 8d6:	61 e0       	ldi	r22, 0x01	; 1
 8d8:	83 e4       	ldi	r24, 0x43	; 67
 8da:	0e 94 39 03 	call	0x672	; 0x672 <LED_turn_off>
						LED_turn_off('C',0);
					}
					else if (1==flag2)
					{
						counter2--;
						flag2=0;
 8de:	dc 2c       	mov	r13, r12
 8e0:	09 c0       	rjmp	.+18     	; 0x8f4 <__stack+0x95>
						LED_turn_off('C',1);
					}
					else if (1==flag4)
 8e2:	91 e0       	ldi	r25, 0x01	; 1
 8e4:	b9 12       	cpse	r11, r25
 8e6:	06 c0       	rjmp	.+12     	; 0x8f4 <__stack+0x95>
					{
						counter4--;
 8e8:	fa 94       	dec	r15
						flag4=0;
						LED_turn_off('C',3);
 8ea:	63 e0       	ldi	r22, 0x03	; 3
 8ec:	83 e4       	ldi	r24, 0x43	; 67
 8ee:	0e 94 39 03 	call	0x672	; 0x672 <LED_turn_off>
						LED_turn_off('C',1);
					}
					else if (1==flag4)
					{
						counter4--;
						flag4=0;
 8f2:	bc 2c       	mov	r11, r12
						LED_turn_off('C',3);
					}
					counter3++;
 8f4:	0f 5f       	subi	r16, 0xFF	; 255
					flag3=1;
					LED_turn_on('C',2);
 8f6:	62 e0       	ldi	r22, 0x02	; 2
 8f8:	83 e4       	ldi	r24, 0x43	; 67
 8fa:	0e 94 35 03 	call	0x66a	; 0x66a <LED_turn_on>
						counter4--;
						flag4=0;
						LED_turn_off('C',3);
					}
					counter3++;
					flag3=1;
 8fe:	cc 24       	eor	r12, r12
 900:	c3 94       	inc	r12
 902:	3a c0       	rjmp	.+116    	; 0x978 <__stack+0x119>
					LED_turn_on('C',2);
				}
				else
				{
					counter3--;
 904:	01 50       	subi	r16, 0x01	; 1
					flag3=0;
					LED_turn_off('C',2);
 906:	62 e0       	ldi	r22, 0x02	; 2
 908:	83 e4       	ldi	r24, 0x43	; 67
 90a:	0e 94 39 03 	call	0x672	; 0x672 <LED_turn_off>
					LED_turn_on('C',2);
				}
				else
				{
					counter3--;
					flag3=0;
 90e:	c1 2c       	mov	r12, r1
 910:	33 c0       	rjmp	.+102    	; 0x978 <__stack+0x119>
					LED_turn_off('C',2);
				}
				
			}
			else if (0==BUTTON_read('B',3))
 912:	63 e0       	ldi	r22, 0x03	; 3
 914:	82 e4       	ldi	r24, 0x42	; 66
 916:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <BUTTON_read>
 91a:	81 11       	cpse	r24, r1
 91c:	2d c0       	rjmp	.+90     	; 0x978 <__stack+0x119>
			{
				if (0==flag4)
 91e:	b1 10       	cpse	r11, r1
 920:	25 c0       	rjmp	.+74     	; 0x96c <__stack+0x10d>
				{
					if (1==flag1)
 922:	21 e0       	ldi	r18, 0x01	; 1
 924:	e2 12       	cpse	r14, r18
 926:	07 c0       	rjmp	.+14     	; 0x936 <__stack+0xd7>
					{
						counter1--;
 928:	d1 50       	subi	r29, 0x01	; 1
						flag1=0;
						LED_turn_off('C',0);
 92a:	60 e0       	ldi	r22, 0x00	; 0
 92c:	83 e4       	ldi	r24, 0x43	; 67
 92e:	0e 94 39 03 	call	0x672	; 0x672 <LED_turn_off>
				if (0==flag4)
				{
					if (1==flag1)
					{
						counter1--;
						flag1=0;
 932:	eb 2c       	mov	r14, r11
 934:	13 c0       	rjmp	.+38     	; 0x95c <__stack+0xfd>
						LED_turn_off('C',0);
					}
					else if (1==flag2)
 936:	81 e0       	ldi	r24, 0x01	; 1
 938:	d8 12       	cpse	r13, r24
 93a:	07 c0       	rjmp	.+14     	; 0x94a <__stack+0xeb>
					{
						counter2--;
 93c:	11 50       	subi	r17, 0x01	; 1
						flag2=0;
						LED_turn_off('C',1);
 93e:	61 e0       	ldi	r22, 0x01	; 1
 940:	83 e4       	ldi	r24, 0x43	; 67
 942:	0e 94 39 03 	call	0x672	; 0x672 <LED_turn_off>
						LED_turn_off('C',0);
					}
					else if (1==flag2)
					{
						counter2--;
						flag2=0;
 946:	db 2c       	mov	r13, r11
 948:	09 c0       	rjmp	.+18     	; 0x95c <__stack+0xfd>
						LED_turn_off('C',1);
					}
					else if (1==flag3)
 94a:	91 e0       	ldi	r25, 0x01	; 1
 94c:	c9 12       	cpse	r12, r25
 94e:	06 c0       	rjmp	.+12     	; 0x95c <__stack+0xfd>
					{
						counter3--;
 950:	01 50       	subi	r16, 0x01	; 1
						flag3=0;
						LED_turn_off('C',2);
 952:	62 e0       	ldi	r22, 0x02	; 2
 954:	83 e4       	ldi	r24, 0x43	; 67
 956:	0e 94 39 03 	call	0x672	; 0x672 <LED_turn_off>
						LED_turn_off('C',1);
					}
					else if (1==flag3)
					{
						counter3--;
						flag3=0;
 95a:	cb 2c       	mov	r12, r11
						LED_turn_off('C',2);
					}
					counter4++;
 95c:	f3 94       	inc	r15
					flag4=1;
					LED_turn_on('C',3);
 95e:	63 e0       	ldi	r22, 0x03	; 3
 960:	83 e4       	ldi	r24, 0x43	; 67
 962:	0e 94 35 03 	call	0x66a	; 0x66a <LED_turn_on>
						counter3--;
						flag3=0;
						LED_turn_off('C',2);
					}
					counter4++;
					flag4=1;
 966:	bb 24       	eor	r11, r11
 968:	b3 94       	inc	r11
 96a:	06 c0       	rjmp	.+12     	; 0x978 <__stack+0x119>
					LED_turn_on('C',3);
				}
				else
				{
					counter4--;
 96c:	fa 94       	dec	r15
					flag4=0;
					LED_turn_off('C',3);
 96e:	63 e0       	ldi	r22, 0x03	; 3
 970:	83 e4       	ldi	r24, 0x43	; 67
 972:	0e 94 39 03 	call	0x672	; 0x672 <LED_turn_off>
					LED_turn_on('C',3);
				}
				else
				{
					counter4--;
					flag4=0;
 976:	b1 2c       	mov	r11, r1
 978:	2f ef       	ldi	r18, 0xFF	; 255
 97a:	81 ee       	ldi	r24, 0xE1	; 225
 97c:	94 e0       	ldi	r25, 0x04	; 4
 97e:	21 50       	subi	r18, 0x01	; 1
 980:	80 40       	sbci	r24, 0x00	; 0
 982:	90 40       	sbci	r25, 0x00	; 0
 984:	e1 f7       	brne	.-8      	; 0x97e <__stack+0x11f>
 986:	00 c0       	rjmp	.+0      	; 0x988 <__stack+0x129>
 988:	00 00       	nop
					LED_turn_off('C',3);
				}
				
			}
			_delay_ms(200);
			enter=BUTTON_read('B',4);
 98a:	64 e0       	ldi	r22, 0x04	; 4
 98c:	82 e4       	ldi	r24, 0x42	; 66
 98e:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <BUTTON_read>
 992:	c8 2f       	mov	r28, r24
			if (enter==0 && value1==counter1 && value2==counter2 && value3==counter3 && value4==counter4)
 994:	81 11       	cpse	r24, r1
 996:	8b c0       	rjmp	.+278    	; 0xaae <__stack+0x24f>
 998:	ad 12       	cpse	r10, r29
 99a:	89 c0       	rjmp	.+274    	; 0xaae <__stack+0x24f>
 99c:	91 12       	cpse	r9, r17
 99e:	87 c0       	rjmp	.+270    	; 0xaae <__stack+0x24f>
 9a0:	80 12       	cpse	r8, r16
 9a2:	85 c0       	rjmp	.+266    	; 0xaae <__stack+0x24f>
 9a4:	7f 10       	cpse	r7, r15
 9a6:	83 c0       	rjmp	.+262    	; 0xaae <__stack+0x24f>
			{
				LCD_clr_screen();
 9a8:	0e 94 05 03 	call	0x60a	; 0x60a <LCD_clr_screen>
				LCD_send_string("please vote");
 9ac:	80 e7       	ldi	r24, 0x70	; 112
 9ae:	90 e0       	ldi	r25, 0x00	; 0
 9b0:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <LCD_send_string>
 9b4:	2f ef       	ldi	r18, 0xFF	; 255
 9b6:	8e e9       	ldi	r24, 0x9E	; 158
 9b8:	94 e2       	ldi	r25, 0x24	; 36
 9ba:	21 50       	subi	r18, 0x01	; 1
 9bc:	80 40       	sbci	r24, 0x00	; 0
 9be:	90 40       	sbci	r25, 0x00	; 0
 9c0:	e1 f7       	brne	.-8      	; 0x9ba <__stack+0x15b>
 9c2:	00 c0       	rjmp	.+0      	; 0x9c4 <__stack+0x165>
 9c4:	00 00       	nop
				_delay_ms(1500);
				LCD_clr_screen();
 9c6:	0e 94 05 03 	call	0x60a	; 0x60a <LCD_clr_screen>
				LCD_move_cursor(1,1);
 9ca:	61 e0       	ldi	r22, 0x01	; 1
 9cc:	81 e0       	ldi	r24, 0x01	; 1
 9ce:	0e 94 0f 03 	call	0x61e	; 0x61e <LCD_move_cursor>
				LCD_send_string("A=");
 9d2:	8c e7       	ldi	r24, 0x7C	; 124
 9d4:	90 e0       	ldi	r25, 0x00	; 0
 9d6:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <LCD_send_string>
				LCD_send_data((counter1/10)+48);
 9da:	cd ec       	ldi	r28, 0xCD	; 205
 9dc:	dc 9f       	mul	r29, r28
 9de:	61 2c       	mov	r6, r1
 9e0:	11 24       	eor	r1, r1
 9e2:	66 94       	lsr	r6
 9e4:	66 94       	lsr	r6
 9e6:	66 94       	lsr	r6
 9e8:	80 e3       	ldi	r24, 0x30	; 48
 9ea:	86 0d       	add	r24, r6
 9ec:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <LCD_send_data>
				LCD_send_data((counter1%10)+48);
 9f0:	66 0c       	add	r6, r6
 9f2:	86 2d       	mov	r24, r6
 9f4:	88 0f       	add	r24, r24
 9f6:	88 0f       	add	r24, r24
 9f8:	68 0e       	add	r6, r24
 9fa:	8d 2f       	mov	r24, r29
 9fc:	86 19       	sub	r24, r6
 9fe:	80 5d       	subi	r24, 0xD0	; 208
 a00:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <LCD_send_data>
				LCD_move_cursor(1,12);
 a04:	6c e0       	ldi	r22, 0x0C	; 12
 a06:	81 e0       	ldi	r24, 0x01	; 1
 a08:	0e 94 0f 03 	call	0x61e	; 0x61e <LCD_move_cursor>
				LCD_send_string("B=");
 a0c:	8f e7       	ldi	r24, 0x7F	; 127
 a0e:	90 e0       	ldi	r25, 0x00	; 0
 a10:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <LCD_send_string>
				LCD_send_data((counter2/10)+48);
 a14:	1c 9f       	mul	r17, r28
 a16:	61 2c       	mov	r6, r1
 a18:	11 24       	eor	r1, r1
 a1a:	66 94       	lsr	r6
 a1c:	66 94       	lsr	r6
 a1e:	66 94       	lsr	r6
 a20:	80 e3       	ldi	r24, 0x30	; 48
 a22:	86 0d       	add	r24, r6
 a24:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <LCD_send_data>
				LCD_send_data((counter2%10)+48);
 a28:	66 0c       	add	r6, r6
 a2a:	86 2d       	mov	r24, r6
 a2c:	88 0f       	add	r24, r24
 a2e:	88 0f       	add	r24, r24
 a30:	68 0e       	add	r6, r24
 a32:	81 2f       	mov	r24, r17
 a34:	86 19       	sub	r24, r6
 a36:	80 5d       	subi	r24, 0xD0	; 208
 a38:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <LCD_send_data>
				LCD_move_cursor(2,1);
 a3c:	61 e0       	ldi	r22, 0x01	; 1
 a3e:	82 e0       	ldi	r24, 0x02	; 2
 a40:	0e 94 0f 03 	call	0x61e	; 0x61e <LCD_move_cursor>
				LCD_send_string("C=");
 a44:	82 e8       	ldi	r24, 0x82	; 130
 a46:	90 e0       	ldi	r25, 0x00	; 0
 a48:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <LCD_send_string>
				LCD_send_data((counter3/10)+48);
 a4c:	0c 9f       	mul	r16, r28
 a4e:	61 2c       	mov	r6, r1
 a50:	11 24       	eor	r1, r1
 a52:	66 94       	lsr	r6
 a54:	66 94       	lsr	r6
 a56:	66 94       	lsr	r6
 a58:	80 e3       	ldi	r24, 0x30	; 48
 a5a:	86 0d       	add	r24, r6
 a5c:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <LCD_send_data>
				LCD_send_data((counter3%10)+48);
 a60:	66 0c       	add	r6, r6
 a62:	86 2d       	mov	r24, r6
 a64:	88 0f       	add	r24, r24
 a66:	88 0f       	add	r24, r24
 a68:	68 0e       	add	r6, r24
 a6a:	80 2f       	mov	r24, r16
 a6c:	86 19       	sub	r24, r6
 a6e:	80 5d       	subi	r24, 0xD0	; 208
 a70:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <LCD_send_data>
				LCD_move_cursor(2,12);
 a74:	6c e0       	ldi	r22, 0x0C	; 12
 a76:	82 e0       	ldi	r24, 0x02	; 2
 a78:	0e 94 0f 03 	call	0x61e	; 0x61e <LCD_move_cursor>
				LCD_send_string("D=");
 a7c:	85 e8       	ldi	r24, 0x85	; 133
 a7e:	90 e0       	ldi	r25, 0x00	; 0
 a80:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <LCD_send_string>
				LCD_send_data((counter4/10)+48);
 a84:	fc 9e       	mul	r15, r28
 a86:	c1 2d       	mov	r28, r1
 a88:	11 24       	eor	r1, r1
 a8a:	c6 95       	lsr	r28
 a8c:	c6 95       	lsr	r28
 a8e:	c6 95       	lsr	r28
 a90:	80 e3       	ldi	r24, 0x30	; 48
 a92:	8c 0f       	add	r24, r28
 a94:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <LCD_send_data>
				LCD_send_data((counter4%10)+48);
 a98:	cc 0f       	add	r28, r28
 a9a:	8c 2f       	mov	r24, r28
 a9c:	88 0f       	add	r24, r24
 a9e:	88 0f       	add	r24, r24
 aa0:	c8 0f       	add	r28, r24
 aa2:	8f 2d       	mov	r24, r15
 aa4:	8c 1b       	sub	r24, r28
 aa6:	80 5d       	subi	r24, 0xD0	; 208
 aa8:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <LCD_send_data>
				goto label;
 aac:	96 ce       	rjmp	.-724    	; 0x7da <main+0x160>
			}
			if (0==enter)
 aae:	c1 11       	cpse	r28, r1
 ab0:	14 c0       	rjmp	.+40     	; 0xada <__stack+0x27b>
			{
				LED_turn_off('C',0);
 ab2:	60 e0       	ldi	r22, 0x00	; 0
 ab4:	83 e4       	ldi	r24, 0x43	; 67
 ab6:	0e 94 39 03 	call	0x672	; 0x672 <LED_turn_off>
				LED_turn_off('C',1);
 aba:	61 e0       	ldi	r22, 0x01	; 1
 abc:	83 e4       	ldi	r24, 0x43	; 67
 abe:	0e 94 39 03 	call	0x672	; 0x672 <LED_turn_off>
				LED_turn_off('C',2);
 ac2:	62 e0       	ldi	r22, 0x02	; 2
 ac4:	83 e4       	ldi	r24, 0x43	; 67
 ac6:	0e 94 39 03 	call	0x672	; 0x672 <LED_turn_off>
				LED_turn_off('C',3);
 aca:	63 e0       	ldi	r22, 0x03	; 3
 acc:	83 e4       	ldi	r24, 0x43	; 67
 ace:	0e 94 39 03 	call	0x672	; 0x672 <LED_turn_off>
				LED_turn_on('C',6);
 ad2:	66 e0       	ldi	r22, 0x06	; 6
 ad4:	83 e4       	ldi	r24, 0x43	; 67
 ad6:	0e 94 35 03 	call	0x66a	; 0x66a <LED_turn_on>
			}
			
		} while (1==enter);
 ada:	c1 30       	cpi	r28, 0x01	; 1
 adc:	09 f4       	brne	.+2      	; 0xae0 <__stack+0x281>
 ade:	7d ce       	rjmp	.-774    	; 0x7da <main+0x160>
		
		LCD_move_cursor(1,3);
 ae0:	63 e0       	ldi	r22, 0x03	; 3
 ae2:	81 e0       	ldi	r24, 0x01	; 1
 ae4:	0e 94 0f 03 	call	0x61e	; 0x61e <LCD_move_cursor>
		LCD_send_data((counter1/10)+48);
 ae8:	cd ec       	ldi	r28, 0xCD	; 205
 aea:	dc 9f       	mul	r29, r28
 aec:	e1 2c       	mov	r14, r1
 aee:	11 24       	eor	r1, r1
 af0:	e6 94       	lsr	r14
 af2:	e6 94       	lsr	r14
 af4:	e6 94       	lsr	r14
 af6:	80 e3       	ldi	r24, 0x30	; 48
 af8:	8e 0d       	add	r24, r14
 afa:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <LCD_send_data>
		LCD_send_data((counter1%10)+48);
 afe:	ee 0c       	add	r14, r14
 b00:	8e 2d       	mov	r24, r14
 b02:	88 0f       	add	r24, r24
 b04:	88 0f       	add	r24, r24
 b06:	e8 0e       	add	r14, r24
 b08:	8d 2f       	mov	r24, r29
 b0a:	8e 19       	sub	r24, r14
 b0c:	80 5d       	subi	r24, 0xD0	; 208
 b0e:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <LCD_send_data>
		LCD_move_cursor(1,14);
 b12:	6e e0       	ldi	r22, 0x0E	; 14
 b14:	81 e0       	ldi	r24, 0x01	; 1
 b16:	0e 94 0f 03 	call	0x61e	; 0x61e <LCD_move_cursor>
		LCD_send_data((counter2/10)+48);
 b1a:	1c 9f       	mul	r17, r28
 b1c:	e1 2c       	mov	r14, r1
 b1e:	11 24       	eor	r1, r1
 b20:	e6 94       	lsr	r14
 b22:	e6 94       	lsr	r14
 b24:	e6 94       	lsr	r14
 b26:	80 e3       	ldi	r24, 0x30	; 48
 b28:	8e 0d       	add	r24, r14
 b2a:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <LCD_send_data>
		LCD_send_data((counter2%10)+48);
 b2e:	ee 0c       	add	r14, r14
 b30:	8e 2d       	mov	r24, r14
 b32:	88 0f       	add	r24, r24
 b34:	88 0f       	add	r24, r24
 b36:	e8 0e       	add	r14, r24
 b38:	81 2f       	mov	r24, r17
 b3a:	8e 19       	sub	r24, r14
 b3c:	80 5d       	subi	r24, 0xD0	; 208
 b3e:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <LCD_send_data>
		LCD_move_cursor(2,3);
 b42:	63 e0       	ldi	r22, 0x03	; 3
 b44:	82 e0       	ldi	r24, 0x02	; 2
 b46:	0e 94 0f 03 	call	0x61e	; 0x61e <LCD_move_cursor>
		LCD_send_data((counter3/10)+48);
 b4a:	0c 9f       	mul	r16, r28
 b4c:	e1 2c       	mov	r14, r1
 b4e:	11 24       	eor	r1, r1
 b50:	e6 94       	lsr	r14
 b52:	e6 94       	lsr	r14
 b54:	e6 94       	lsr	r14
 b56:	80 e3       	ldi	r24, 0x30	; 48
 b58:	8e 0d       	add	r24, r14
 b5a:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <LCD_send_data>
		LCD_send_data((counter3%10)+48);
 b5e:	ee 0c       	add	r14, r14
 b60:	8e 2d       	mov	r24, r14
 b62:	88 0f       	add	r24, r24
 b64:	88 0f       	add	r24, r24
 b66:	e8 0e       	add	r14, r24
 b68:	80 2f       	mov	r24, r16
 b6a:	8e 19       	sub	r24, r14
 b6c:	80 5d       	subi	r24, 0xD0	; 208
 b6e:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <LCD_send_data>
		LCD_move_cursor(2,14);
 b72:	6e e0       	ldi	r22, 0x0E	; 14
 b74:	82 e0       	ldi	r24, 0x02	; 2
 b76:	0e 94 0f 03 	call	0x61e	; 0x61e <LCD_move_cursor>
		LCD_send_data((counter4/10)+48);
 b7a:	fc 9e       	mul	r15, r28
 b7c:	c1 2d       	mov	r28, r1
 b7e:	11 24       	eor	r1, r1
 b80:	c6 95       	lsr	r28
 b82:	c6 95       	lsr	r28
 b84:	c6 95       	lsr	r28
 b86:	80 e3       	ldi	r24, 0x30	; 48
 b88:	8c 0f       	add	r24, r28
 b8a:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <LCD_send_data>
		LCD_send_data((counter4%10)+48);;
 b8e:	cc 0f       	add	r28, r28
 b90:	8c 2f       	mov	r24, r28
 b92:	88 0f       	add	r24, r24
 b94:	88 0f       	add	r24, r24
 b96:	c8 0f       	add	r28, r24
 b98:	8f 2d       	mov	r24, r15
 b9a:	8c 1b       	sub	r24, r28
 b9c:	80 5d       	subi	r24, 0xD0	; 208
 b9e:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <LCD_send_data>
		
    }
 ba2:	7f 2c       	mov	r7, r15
 ba4:	80 2e       	mov	r8, r16
 ba6:	91 2e       	mov	r9, r17
 ba8:	ad 2e       	mov	r10, r29
 baa:	c1 cd       	rjmp	.-1150   	; 0x72e <main+0xb4>

00000bac <__tablejump2__>:
 bac:	ee 0f       	add	r30, r30
 bae:	ff 1f       	adc	r31, r31
 bb0:	05 90       	lpm	r0, Z+
 bb2:	f4 91       	lpm	r31, Z
 bb4:	e0 2d       	mov	r30, r0
 bb6:	09 94       	ijmp

00000bb8 <_exit>:
 bb8:	f8 94       	cli

00000bba <__stop_program>:
 bba:	ff cf       	rjmp	.-2      	; 0xbba <__stop_program>
